{"version":3,"file":"main.js","mappings":"mBACA,IAAMA,EAAkB,kBAGjB,SAASC,EAAUC,GACxBA,EAAaC,UAAUC,IAAIJ,GAE3BK,SAASC,iBAAiB,UAAWC,EACvC,CAGO,SAASC,EAAWN,GACzBA,EAAaC,UAAUM,OAAOT,GAE9BK,SAASK,oBAAoB,UAAWH,EAC1C,CAGA,SAASA,EAAaI,GACpB,GAAgB,WAAZA,EAAIC,IAAkB,CACxB,IAAMC,EAAcR,SAASS,cAAc,IAADC,OAAKf,IAC3Ca,GACFL,EAAWK,EAEf,CACF,CAGO,SAASG,EAAmBL,GAC7BA,EAAIM,SAAWN,EAAIO,eACrBV,EAAWG,EAAIO,cAEnB,CChCA,IAAMC,EAAed,SAClBe,eAAe,iBACfC,QAAQP,cAAc,SAIlB,SAASQ,EACdC,EAAUC,EAMVC,GACA,IALEC,EAAYF,EAAZE,aACAC,EAAUH,EAAVG,WACAC,EAAUJ,EAAVI,WAIIC,EAAcV,EAAaW,WAAU,GAErCC,EAAYF,EAAYf,cAAc,gBACtCkB,EAAYH,EAAYf,cAAc,gBACtCmB,EAAmBJ,EAAYf,cAAc,wBAC7CoB,EAAaL,EAAYf,cAAc,sBACvCqB,EAAcN,EAAYf,cAAc,uBAE9CiB,EAAUK,IAAMb,EAAWc,KAC3BN,EAAUO,IAAM,cAAHvB,OAAiBQ,EAAWgB,MACzCP,EAAUQ,YAAcjB,EAAWgB,KACnCJ,EAAYK,YAAcjB,EAAWkB,MAAMC,QAAU,GAGjDnB,EAAWoB,MAAMC,MAAQnB,IAC3BQ,EAAiBY,MAAMC,QAAU,QAInC,IAAMC,EAAUxB,EAAWkB,MAAMO,KAAK,SAACC,GAAI,OAAKA,EAAKL,MAAQnB,CAAM,GAmBnE,OAlBAS,EAAW/B,UAAU+C,OAAO,8BAA+BH,GAG3Dd,EAAiB3B,iBAAiB,QAAS,WACzCoB,EAAaG,EAAaN,EAAWqB,IACvC,GAEAV,EAAW5B,iBAAiB,QAAS,WACnC,IAAM6C,EAAiBjB,EAAW/B,UAAUiD,SAC1C,+BAEFzB,EAAWO,EAAYX,EAAWqB,IAAKO,EAAgBhB,EACzD,GAEAJ,EAAUzB,iBAAiB,QAAS,WAClCsB,EAAWL,EACb,GAEOM,CACT,CCrDA,IAkBMwB,EAAiB,SACrBC,EACAC,EACAC,GAGA,IAAMC,EAAeH,EAAYxC,cAAc,IAADC,OAAKwC,EAAaG,GAAE,WAClEH,EAAapD,UAAUM,OAAO+C,EAAiBG,iBAE/CF,EAAatD,UAAUM,OAAO+C,EAAiBI,YAE/CH,EAAajB,YAAc,EAC7B,EAgBMqB,EAAoB,SACxBC,EACAC,EACAP,IAfsB,SAACM,GAEvB,OAAOA,EAAUd,KAAK,SAAAO,GAEpB,OAAQA,EAAaS,SAASC,KAChC,EACF,CAYMC,CAAgBJ,IAMlBC,EAAcI,UAAW,EACzBJ,EAAc5D,UAAUM,OAAO+C,EAAiBY,uBALhDL,EAAcI,UAAW,EACzBJ,EAAc5D,UAAUC,IAAIoD,EAAiBY,qBAMjD,EAkFaC,EAAkB,SAC7Bf,EACAE,GAGkBc,MAAMC,KACtBjB,EAAYkB,iBAAiBhB,EAAiBiB,gBAGtCC,QAAQ,SAACnB,GAGjBF,EAAeC,EAAaC,EAAcC,GAE1CD,EAAaoB,kBAAkB,GACjC,GAGA,IAAMZ,EAAgBT,EAAYxC,cAChC0C,EAAiBoB,sBAGnBb,EAAcI,UAAW,EACzBJ,EAAc5D,UAAUC,IAAIoD,EAAiBY,oBAC/C,ECrKMS,EAAS,CACbC,QAAS,4CACTC,QAAS,CACPC,cAAe,uCACf,eAAgB,qBAKdC,EAAgB,SAACC,GACrB,OAAOA,EAAIC,GAAKD,EAAIE,OAASC,QAAQC,OAAO,WAADvE,OAAYmE,EAAIK,QAC7D,E,sGCMA,IAkCI9D,EAlCE+D,EAAkBnF,SAASS,cAAc,iBAEzC2E,EAAoBpF,SAASS,cAAc,yBAC3C4E,EAAgBrF,SAASS,cAAc,wBAEvC6E,EAAStF,SAASmE,iBAAiB,UACnCoB,EAAevF,SAASS,cAAc,oBACtC+E,EAAexF,SAASS,cAAc,wBAEtCgF,EAAazF,SAASS,cAAc,qBACpCiF,EAAYD,EAAWhF,cAAc,iBACrCkF,EAAcF,EAAWhF,cAAc,mBAEvCmF,EAAc5F,SAAS6F,MAAM,gBAC7BC,EAAc9F,SAAS6F,MAAM,aAE7BE,EAAYR,EAAa9E,cAAc,2BACvCuF,EAAWT,EAAa9E,cAAc,kCAEtCwF,EAAcjG,SAASS,cAAc,2BACrCyF,EAAalG,SAAS6F,MAAM,eAC5BM,EAAcD,EAAWzF,cAAc,wBACvC2F,EAAcF,EAAWzF,cAAc,6BACvC4F,EAAerG,SAASS,cAAc,mBAEtC6F,EAAaR,EAAYrF,cAAc,gCACvC8F,EAAYT,EAAYrF,cAAc,0BAEtC+F,EAAcxG,SAASS,cAAc,mBACrCgG,EAAazG,SAASS,cAAc,yBAEpCiG,EAAe1G,SAASS,cAAc,uBACtCkG,EAAgBD,EAAajG,cAAc,kBAG7CmG,EAAgB,KAChBC,EAAqB,KAInB1D,EAAmB,CACvB2D,aAAc,eACd1C,cAAe,gBACfG,qBAAsB,iBACtBR,oBAAqB,yBACrBT,gBAAiB,0BACjBC,WAAY,yBF8DkB,SAACJ,GAGdc,MAAMC,KACrBlE,SAASmE,iBAAiBhB,EAAiB2D,eAIpCzC,QAAQ,SAACpB,IApCM,SACxBA,EACAE,GAGA,IAAMM,EAAYQ,MAAMC,KACtBjB,EAAYkB,iBAAiBhB,EAAiBiB,gBAG1CV,EAAgBT,EAAYxC,cAChC0C,EAAiBoB,sBAGnBf,EAAkBC,EAAWC,EAAeP,GAE5CM,EAAUY,QAAQ,SAACnB,GAEjBA,EAAajD,iBAAiB,QAAS,YApD3B,SACdgD,EACAC,EACAC,GAEID,EAAaS,SAASoD,gBAExB7D,EAAaoB,kBAAkBpB,EAAa8D,QAAQC,cAIpD/D,EAAaoB,kBAAkB,IAG5BpB,EAAaS,SAASC,MAYzBZ,EACEC,EACAC,EACAC,GA7FiB,SACrBF,EACAC,EACA+D,EACA9D,GAGA,IAAMC,EAAeH,EAAYxC,cAAc,IAADC,OAAKwC,EAAaG,GAAE,WAElEH,EAAapD,UAAUC,IAAIoD,EAAiBG,iBAE5CF,EAAajB,YAAc8E,EAE3B7D,EAAatD,UAAUC,IAAIoD,EAAiBI,WAC9C,CAmEI2D,CACEjE,EACAC,EACAA,EAAaiE,kBACbhE,EAWN,CAuBMiE,CAAQnE,EAAaC,EAAcC,GAEnCK,EAAkBC,EAAWC,EAAeP,EAC9C,EACF,EACF,CAcIkE,CAAkBpE,EAAaE,EACjC,EACF,CExEAmE,CAAiBnE,GAsBjB6B,QAAQuC,IAAI,CDzEHC,MAAM,GAAD9G,OAAI8D,EAAOC,QAAO,aAAa,CACzCC,QAASF,EAAOE,UACf+C,KAAK7C,GAKD4C,MAAM,GAAD9G,OAAI8D,EAAOC,QAAO,UAAU,CACtCC,QAASF,EAAOE,UACf+C,KAAK7C,KCiEP6C,KAAK,SAAAtG,GAAuB,I,IAAAuG,G,EAAA,E,4CAAAvG,I,s1BAArBwG,EAAQD,EAAA,GAAEE,EAAKF,EAAA,GAGrBtG,EAASuG,EAASpF,IAElBiE,EAAYrE,YAAcwF,EAASzF,KACnCuE,EAAWtE,YAAcwF,EAASE,MAE9BF,EAASG,SACXzB,EAAa7D,MAAMuF,gBAAkB,QAAHrH,OAAWiH,EAASG,OAAM,OApBlE,SAAqBF,EAAOxG,GAC1BwG,EAAMvD,QAAQ,SAAC2D,GAEb,IAAMxG,EAAcP,EAAW+G,EAAMC,EAAe7G,GAEpD+D,EAAgB+C,OAAO1G,EACzB,EACF,CAgBI2G,CAAYP,EAAOxG,EACrB,GAECgH,MAAM,SAACC,GACNC,QAAQC,MAAM,qBAAsBF,EACtC,GA2CF3B,EAAazG,iBAAiB,SAxBR,SAACK,GD/DG,IAACkI,ECgEzBlI,EAAImI,iBAGJ9B,EAAcxE,YAAc,cAC5BwE,EAAc7C,UAAW,GDpEA0E,ECuEd5B,EDtEJY,MAAM,GAAD9G,OAAI8D,EAAOC,QAAO,WAAA/D,OAAU8H,GAAU,CAChDE,OAAQ,SACRhE,QAASF,EAAOE,UACf+C,KAAK7C,ICoEL6C,KAAK,WAEJZ,EAAmBzG,SACnBD,EAAWuG,EACb,GACC0B,MAAM,SAACG,GACND,QAAQK,IAAI,iCAADjI,OAAkC6H,GAC/C,GACCK,QAAQ,WACPjC,EAAcxE,YAAc,KAC5BwE,EAAc7C,UAAW,CAC3B,EACJ,GAkBA,IAAMmE,EAAgB,CACpB5G,aAjDF,SAAoBG,EAAagH,GAC/B5B,EAAgB4B,EAChB3B,EAAqBrF,EACrB5B,EAAU8G,EACZ,EA8CEpF,WAdF,SAAkBO,EAAY2G,EAAQ9F,EAASZ,IDpGrB,SAAC0G,EAAQ9F,GACjC,IAAMmG,EAAW,GAAHnI,OAAM8D,EAAOC,QAAO,iBAAA/D,OAAgB8H,GAKlD,OAAOhB,MAAMqB,EAJQ,CACnBnE,QAASF,EAAOE,QAChBgE,OAAQhG,EAAU,SAAW,QAEM+E,KAAK7C,EAC5C,EC+FEkE,CAAWN,EAAQ9F,GAChB+E,KAAK,SAACsB,GAELjH,EAAYK,YAAc4G,EAAY3G,MAAMC,OAC5CR,EAAW/B,UAAU+C,OAAO,8BAC9B,GACCuF,MAAM,SAACG,GAAK,OAAKD,QAAQK,IAAI,8BAADjI,OAA+B6H,GAAQ,EACxE,EAMEhH,WA1DF,SAAiByH,GAAiB,IAAd9G,EAAI8G,EAAJ9G,KAAMF,EAAIgH,EAAJhH,KACxB0D,EAAU3D,IAAMC,EAChB0D,EAAUzD,IAAMC,EAChByD,EAAYxD,YAAcD,EAC1BtC,EAAU6F,EACZ,GAuJAS,EAAWjG,iBAAiB,SA3B5B,SAA4BK,GAC1BA,EAAImI,iBAEJ,ID3K2BQ,EC2KrBC,EAAehD,EAAWzF,cAAc,kBACxC0I,EAAeD,EAAa/G,YAGlC+G,EAAa/G,YAAc,gBAC3B+G,EAAapF,UAAW,GDhLGmF,ECkLd9C,EAAYiD,MDjLlB5B,MAAM,GAAD9G,OAAI8D,EAAOC,QAAO,oBAAoB,CAChDiE,OAAQ,QACRhE,QAASF,EAAOE,QAChB2E,KAAMC,KAAKC,UAAU,CACnBzB,OAAQmB,MAETxB,KAAK7C,IC4KL6C,KAAK,SAACE,GAELtB,EAAa7D,MAAMuF,gBAAkB,QAAHrH,OAAWiH,EAASG,OAAM,MAC5D3H,EAAW8F,EACb,GACCmC,MAAM,SAACC,GACNC,QAAQC,MAAM,6BAA8BF,GAC5CjC,EAAYjE,YAAc,4BAC5B,GACCyG,QAAQ,WACPM,EAAa/G,YAAcgH,EAC3BD,EAAapF,UAAW,CAC1B,EACJ,GAMAuC,EAAapG,iBAAiB,QAAS,WACrCiG,EAAWsD,QACXxF,EAAgBkC,EAAY/C,GAC5BvD,EAAUqG,EACZ,GAGAb,EAAkBnF,iBAAiB,QAAS,WAE1C8F,EAAUqD,MAAQ5C,EAAYrE,YAC9B6D,EAASoD,MAAQ3C,EAAWtE,YAC5B6B,EAAgB4B,EAAazC,GAC7BvD,EAAU2F,EACZ,GAEAF,EAAcpF,iBAAiB,QAAS,WACtC6F,EAAY0D,QACZ5J,EAAU4F,GACVxB,EAAgB8B,EAAa3C,EAC/B,GAGAmC,EAAOjB,QAAQ,SAACoF,GACMA,EAAMhJ,cAAc,iBAC5BR,iBAAiB,QAAS,WACpCE,EAAWsJ,EACb,GACAA,EAAMxJ,iBAAiB,QAASU,GAKhC8I,EAAM3J,UAAUC,IAAI,oBACtB,GAGA6F,EAAY3F,iBAAiB,SApG7B,SAAiCK,GAC/BA,EAAImI,iBAEJ,IAAMvG,EAAO6D,EAAUqD,MACjBvB,EAAQ7B,EAASoD,MAGjBF,EAAe5I,EAAIM,OAAOH,cAAc,kBACxC0I,EAAeD,EAAa/G,YAClC+G,EAAa/G,YAAc,gBAC3B+G,EAAapF,UAAW,ED1LI,SAAC5B,EAAM2F,GACnC,OAAOL,MAAM,GAAD9G,OAAI8D,EAAOC,QAAO,aAAa,CACzCiE,OAAQ,QACRhE,QAASF,EAAOE,QAChB2E,KAAMC,KAAKC,UAAU,CACnBrH,KAAAA,EACA2F,MAAAA,MAEDJ,KAAK7C,EACV,CCoLE8E,CAAexH,EAAM2F,GAClBJ,KAAK,SAACE,GAELnB,EAAYrE,YAAcwF,EAASzF,KACnCuE,EAAWtE,YAAcwF,EAASE,MAGlC1H,EAAWoF,EACb,GACC6C,MAAM,SAACC,GACNC,QAAQC,MAAM,iCAAkCF,EAElD,GACCO,QAAQ,WAEPM,EAAa/G,YAAcgH,EAC3BD,EAAapF,UAAW,CAC1B,EACJ,GAwEAgC,EAAY7F,iBAAiB,SAAU,SAACK,IAxIxC,SAAiCA,GAC/BA,EAAImI,iBAEJ,IAAMvG,EAAOoE,EAAW8C,MAClBpH,EAAOuE,EAAU6C,MAGjBF,EAAe5I,EAAIM,OAAOH,cAAc,kBAC9CyI,EAAa/G,YAAc,gBAC3B+G,EAAapF,UAAW,ED5IA,SAAC5B,EAAMF,GAC/B,OAAOwF,MAAM,GAAD9G,OAAI8D,EAAOC,QAAO,UAAU,CACtCiE,OAAQ,OACRhE,QAASF,EAAOE,QAChB2E,KAAMC,KAAKC,UAAU,CACnBrH,KAAAA,EACAF,KAAAA,MAEDyF,KAAK7C,EACV,CCsIE+E,CAAWzH,EAAMF,GACdyF,KAAK,SAACmC,GAEL,IAAMpI,EAAcP,EAAW2I,EAAU3B,EAAe7G,GACxD+D,EAAgB0E,QAAQrI,GAGxBsE,EAAY0D,QACZrJ,EAAWqF,EACb,GACC4C,MAAM,SAACC,GACNC,QAAQC,MAAM,kCAAmCF,EACnD,GACCO,QAAQ,WAEPM,EAAa/G,YAAc,YAC3B+G,EAAapF,UAAW,CAC1B,EACJ,CA2GEgG,CAAwBxJ,EAC1B,E","sources":["webpack://mesto-project-ff/./src/scripts/components/modal.js","webpack://mesto-project-ff/./src/scripts/components/card.js","webpack://mesto-project-ff/./src/scripts/validation.js","webpack://mesto-project-ff/./src/scripts/api.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["// описаны функции для работы с модальными окнами: \r\nconst popupOpendClass = \"popup_is-opened\";\r\n\r\n// Универсальная функция открытия модального окна (попапа)\r\nexport function openModal(popupElement) {\r\n  popupElement.classList.add(popupOpendClass);\r\n  // Добавляем обработчик закрытия по Esc\r\n  document.addEventListener(\"keydown\", handleEscape);\r\n}\r\n\r\n// функция закрытия модального окна (попапа)\r\nexport function closeModal(popupElement) {\r\n  popupElement.classList.remove(popupOpendClass);\r\n  // Удаляем обработчики закрытия\r\n  document.removeEventListener(\"keydown\", handleEscape);\r\n}\r\n\r\n// функция-обработчик события нажатия Esc \r\nfunction handleEscape(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector(`.${popupOpendClass}`);\r\n    if (openedPopup) {\r\n      closeModal(openedPopup);\r\n    }\r\n  }\r\n}\r\n\r\n// Обработчик закрытия по клику на оверлей\r\nexport function handleOverlayClick(evt) {\r\n  if (evt.target === evt.currentTarget) {\r\n    closeModal(evt.currentTarget);\r\n  }\r\n}","const cardTemplate = document\r\n  .getElementById(\"card-template\")\r\n  .content.querySelector(\".card\");\r\n\r\n\r\n//Основная функция создания карточки\r\nexport function createCard(\r\n  dataObject,\r\n  { \r\n    onDeleteCard, \r\n    onLikeCard, \r\n    onOpenView \r\n  },\r\n  userId\r\n) {\r\n  const cardElement = cardTemplate.cloneNode(true); // Клонируем шаблон\r\n  // Получаем элементы карточки\r\n  const cardImage = cardElement.querySelector(\".card__image\");\r\n  const cardTitle = cardElement.querySelector(\".card__title\");\r\n  const cardDeleteButton = cardElement.querySelector(\".card__delete-button\");\r\n  const likeButton = cardElement.querySelector(\".card__like-button\");\r\n  const likeCounter = cardElement.querySelector(\".card__like-counter\"); // Добавляем счетчик лайков\r\n  // Заполняем данными\r\n  cardImage.src = dataObject.link;\r\n  cardImage.alt = `Фотография ${dataObject.name}`; // Улучшенный alt\r\n  cardTitle.textContent = dataObject.name;\r\n  likeCounter.textContent = dataObject.likes.length || \"\"; //покажет кол-во лайков или, если их нет, то пустую строку\r\n\r\n  // видимость кнопки удаления\r\n  if (dataObject.owner._id !== userId) {\r\n    cardDeleteButton.style.display = \"none\"; // Скрываю кнопку, если пользователь не == владелец\r\n  }\r\n\r\n  // обновление состояния лайков\r\n  const isLiked = dataObject.likes.some((like) => like._id === userId);\r\n  likeButton.classList.toggle(\"card__like-button_is-active\", isLiked);\r\n\r\n  // Назначаем обработчики событий\r\n  cardDeleteButton.addEventListener(\"click\", () => {\r\n    onDeleteCard(cardElement, dataObject._id); // Передаю ID карточки\r\n  });\r\n\r\n  likeButton.addEventListener(\"click\", () => {\r\n    const currentIsLiked = likeButton.classList.contains(\r\n      \"card__like-button_is-active\"\r\n    );\r\n    onLikeCard(likeButton, dataObject._id, currentIsLiked, likeCounter);\r\n  });\r\n\r\n  cardImage.addEventListener(\"click\", () => {\r\n    onOpenView(dataObject);\r\n  });\r\n\r\n  return cardElement;\r\n}\r\n","// Функция, которая показывает класс с ошибкой\r\nconst showInputError = (\r\n  formElement,\r\n  inputElement,\r\n  errorMessage,\r\n  validationConfig\r\n) => {\r\n  // Находим элемент ошибки внутри самой функции\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  //// добавляю элементу input класс ошибки popup__input_type_error\r\n  inputElement.classList.add(validationConfig.inputErrorClass); \r\n  // Заменим содержимое span с ошибкой на переданный параметр\r\n  errorElement.textContent = errorMessage;\r\n  //  Этот класс сделает ошибку видимой, когда в поле ввода добавят некорректный текст.\r\n  errorElement.classList.add(validationConfig.errorClass);\r\n};\r\n\r\n\r\n// Функция, которая удаляет класс с ошибкой\r\nconst hideInputError = (\r\n  formElement, \r\n  inputElement, \r\n  validationConfig\r\n) => {\r\n  // Находим элемент ошибки внутри самой функции\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.remove(validationConfig.inputErrorClass); // удаляю класс ошибки с элемента input\r\n  // Скрываем сообщение об ошибке\r\n  errorElement.classList.remove(validationConfig.errorClass);\r\n  // Очистим ошибку\r\n  errorElement.textContent = \"\";\r\n};\r\n\r\n//Функция hasInvalidInput только проверяет наличие невалидного поля и сигнализирует,\r\n// можно ли разблокировать кнопку сабмита. Но она ничего не делает с самой кнопкой «Отправить».\r\nconst hasInvalidInput = (inputList) => {\r\n  // проходим по этому массиву методом some\r\n  return inputList.some(inputElement => {\r\n    // Если поле не валидно, Обход массива прекратится и колбэк вернёт true\r\n    return !inputElement.validity.valid;\r\n  });\r\n};\r\n\r\n\r\n\r\n//функция toggleButtonState отключает и включает кнопку.\r\n// принимает массив полей ввода и элемент кнопки, состояние которой нужно менять\r\nconst toggleButtonState = (\r\n  inputList, \r\n  buttonElement, \r\n  validationConfig\r\n) => {\r\n  // Если есть хотя бы один невалидный инпут\r\n  if (hasInvalidInput(inputList)) {\r\n    // делаю кнопку неактивной\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n  } else {\r\n    // иначе делаю кнопку активной\r\n    buttonElement.disabled = false;\r\n    buttonElement.classList.remove(validationConfig.inactiveButtonClass);\r\n  }\r\n};\r\n\r\n// isValid — проверяет валидность поля, внутри вызывает showInputError или hideInputError.\r\nconst isValid = (\r\n  formElement, \r\n  inputElement, \r\n  validationConfig\r\n) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n        // данные атрибута доступны у элемента инпута через ключевое слово dataset.\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    // если передать пустую строку, то будут доступны\r\n    // стандартные браузерные сообщения\r\n    inputElement.setCustomValidity(\"\");\r\n  }\r\n\r\n  if (!inputElement.validity.valid) {\r\n    // Если поле не проходит валидацию, покажем ошибку\r\n    // Передадим параметром форму, в которой находится проверяемое поле, само это поле и сообщение об ошибке\r\n    showInputError(\r\n      formElement,\r\n      inputElement,\r\n      inputElement.validationMessage,\r\n      validationConfig\r\n    );\r\n  } \r\n  else {\r\n    // Если проходит, скроем\r\n    hideInputError(\r\n      formElement, \r\n      inputElement, \r\n      validationConfig\r\n    );\r\n  }\r\n};\r\n\r\n// Добавление обработчиков всем полям формы\r\nconst setEventListeners = (\r\n  formElement, \r\n  validationConfig\r\n) => {\r\n  // Найдём все поля формы и сделаем из них массив методом Array.from\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n  // Найдём в текущей форме кнопку отправки\r\n  const buttonElement = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n  // Вызовем toggleButtonState, чтобы заблокировать кнопку до ввода данных в поля\r\n  toggleButtonState(inputList, buttonElement, validationConfig);\r\n  // Обойдём все элементы полученной коллекции\r\n  inputList.forEach((inputElement) => {\r\n    // каждому полю добавим обработчик события input\r\n    inputElement.addEventListener(\"input\", () => {\r\n      // Внутри колбэка вызовем isValid,\r\n      // передав ей форму и проверяемый элемент\r\n      isValid(formElement, inputElement, validationConfig);\r\n      // Вызовем toggleButtonState и передадим ей массив полей и кнопку\r\n      toggleButtonState(inputList, buttonElement, validationConfig);\r\n    });\r\n  });\r\n};\r\n\r\n//Добавление обработчиков всем формам\r\nexport const enableValidation = (validationConfig) => {\r\n  // Найдём все формы с указанным классом в DOM,\r\n  // сделаем из них массив методом Array.from\r\n  const formList = Array.from(\r\n    document.querySelectorAll(validationConfig.formSelector)\r\n  );\r\n\r\n  // Переберём полученную коллекцию\r\n  formList.forEach((formElement) => {\r\n    // Для каждой формы вызовем функцию setEventListeners,\r\n    // передав ей элемент формы\r\n    setEventListeners(formElement, validationConfig);\r\n  });\r\n};\r\n\r\n// очистка ошибок валидации\r\nexport const clearValidation = (\r\n  formElement, \r\n  validationConfig\r\n) => {\r\n  // Найдём все поля формы и сделаем из них массив методом Array.from\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n  // Обойдём все элементы полученной коллекции\r\n  inputList.forEach((inputElement) => {\r\n    // удаляю класс с ошибкой\r\n    // Если поле не проходит валидацию, покажем ошибку, если проходит-скроет\r\n    hideInputError(formElement, inputElement, validationConfig);\r\n    // если передать пустую строку, то будут доступны, стандартные браузерные сообщения\r\n    inputElement.setCustomValidity(\"\"); \r\n  });\r\n  \r\n  // Найдём в этой форме профиля кнопку отправки\r\n  const buttonElement = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n  // делаю кнопку неактивной\r\n  buttonElement.disabled = true;\r\n  buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n};\r\n\r\n\r\n","// 1. Перед стартом. Необходимая информация\r\n//При каждом запросе нужно передавать токен и идентификатор группы\r\n// базовый адрес сервера и ключ авторизации вынесены отдельно и переиспользуются;\r\nconst config = {\r\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-42\",\r\n  headers: {\r\n    authorization: \"37615660-70b8-4471-9655-1dc0a18b5dfc\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n//2. Перед стартом. Как сделать запрос к серверу\r\n// функция выполняет проверку HTTP-ответа от сервера\r\nconst checkResponse = (res) => {\r\n  return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n//3. Загрузка информации о пользователе с сервера\r\nexport const getUserInfo = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n//4. Загрузка карточек с сервера\r\nexport const getCardList = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n//5. Редактирование профиля\r\nexport const updateUserInfo = (name, about) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name,\r\n      about,\r\n    }),\r\n  }).then(checkResponse);\r\n};\r\n\r\n//6. Добавление новой карточки\r\nexport const addNewCard = (name, link) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name,\r\n      link,\r\n    }),\r\n  }).then(checkResponse);\r\n};\r\n\r\n// 7. Отображение количества лайков карточки и 9. Постановка и снятие лайка\r\nexport const toggleLike = (cardId, isLiked) => {\r\n  const endpoint = `${config.baseUrl}/cards/likes/${cardId}`;\r\n  const fetchOptions = {\r\n    headers: config.headers,\r\n    method: isLiked ? \"DELETE\" : \"PUT\", // Если лайк на момент клика есть, значит будем снимать и наоборот :)\r\n  };\r\n  return fetch(endpoint, fetchOptions).then(checkResponse);\r\n};\r\n\r\n// 8. Удаление карточки\r\nexport const removeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then(checkResponse);\r\n};\r\n\r\n// 10. Обновление аватара пользователя\r\nexport const updateAvatar = (avatarUrl) => {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: avatarUrl,\r\n    }),\r\n  }).then(checkResponse);\r\n};\r\n","import \"./index.css\"; // импорт главного файла стилей\r\n//import { initialCards } from './scripts/cards.js'; //картинки можно импортировать, вебпак добавит в переменные правильные пути\r\nimport {\r\n  openModal,\r\n  closeModal,\r\n  handleOverlayClick,\r\n} from \"./scripts/components/modal.js\";\r\nimport { createCard } from \"./scripts/components/card.js\";\r\nimport { enableValidation, clearValidation } from \"./scripts/validation.js\";\r\nimport {\r\n  getUserInfo,\r\n  getCardList,\r\n  updateUserInfo,\r\n  addNewCard,\r\n  updateAvatar,\r\n  toggleLike,\r\n  removeCard,\r\n} from \"./scripts/api.js\";\r\n\r\n//Получение DOM-элементов\r\nconst placesContainer = document.querySelector(\".places__list\"); //Контейнер для карточек\r\n//Кнопки открытия модальных окон\r\nconst profileEditButton = document.querySelector(\".profile__edit-button\"); // // Кнопка редактирования профиля\r\nconst newCardButton = document.querySelector(\".profile__add-button\"); // // Кнопка добавления карточки\r\n//Элементы модальных окон (попапов)\r\nconst popups = document.querySelectorAll(\".popup\"); // Все попапы\r\nconst popupProfile = document.querySelector(\".popup_type_edit\"); // Попап редактирования профиля\r\nconst popupCardAdd = document.querySelector(\".popup_type_new-card\"); // Попап добавления карточки\r\n//Элементы попапа с изображением\r\nconst imagePopup = document.querySelector(\".popup_type_image\"); // Попап просмотра изображения\r\nconst imageView = imagePopup.querySelector(\".popup__image\"); // Увеличенное изображение\r\nconst captionView = imagePopup.querySelector(\".popup__caption\"); // Подпись к изображению\r\n//Формы и их элементы\r\nconst profileForm = document.forms[\"edit-profile\"]; // Форма редактирования профиля\r\nconst newCardForm = document.forms[\"new-place\"]; // Форма добавления карточки\r\n// Поля формы редактирования профиля\r\nconst nameInput = popupProfile.querySelector(\".popup__input_type_name\");\r\nconst jobInput = popupProfile.querySelector(\".popup__input_type_description\");\r\n// Элементы попапа аватара\r\nconst popupAvatar = document.querySelector(\".popup_type_edit-avatar\");\r\nconst avatarForm = document.forms[\"edit-avatar\"]; //\r\nconst avatarInput = avatarForm.querySelector('input[name=\"avatar\"]'); //ссылка на аватар\r\nconst avatarError = avatarForm.querySelector(\".form__input_avatar-error\");\r\nconst profileImage = document.querySelector(\".profile__image\"); // Контейнер аватара\r\n// Поля формы добавления карточки\r\nconst placeInput = newCardForm.querySelector(\".popup__input_type_card-name\");\r\nconst linkInput = newCardForm.querySelector(\".popup__input_type_url\");\r\n//Элементы профиля\r\nconst profileName = document.querySelector(\".profile__title\");\r\nconst profileJob = document.querySelector(\".profile__description\");\r\n// Элементы попапа подтверждения\r\nconst confirmPopup = document.querySelector(\".popup_type_confirm\");\r\nconst confirmButton = confirmPopup.querySelector(\".popup__button\");\r\n\r\nlet userId; //идентификатор текущего пользователя (для определения своих карточек)\r\nlet currentCardId = null;    //Id карточки для удаления\r\nlet currentCardElement = null; //DOM-элемент карточки\r\n\r\n// включение валидации вызовом enableValidation\r\n// все настройки передаются при вызове\r\nconst validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\",\r\n};\r\n\r\nenableValidation(validationConfig);\r\n\r\n// getUserInfo()\r\n//   .then((user) => {\r\n//     console.log(user); // чтобы увидеть данные в консоли\r\n//   })\r\n//   .catch((err) => {\r\n//     console.log(err);\r\n//   });\r\n\r\n// Используйте этот массив при отображении предзагруженных карточек\r\n//Функция отрисовки карточек\r\nfunction renderCards(cards, userId) {\r\n  cards.forEach((card) => {\r\n    // создаю DOM-элемент для каждой карточки\r\n    const cardElement = createCard(card, cardCallbacks, userId);\r\n    // добавляю в контейнер\r\n    placesContainer.append(cardElement);\r\n  });\r\n}\r\n\r\n//передается массив промисов, которые должны быть выполнены, т.е. наши запросы\r\nPromise.all([getUserInfo(), getCardList()])\r\n  .then(([userData, cards]) => {\r\n    //в блок .then мы попадем когда оба запроса будут выполнены.\r\n    // userData-результат getUserInfo(), cards - результат getCardList()\r\n    userId = userData._id; //// Сохраняем ID пользователя\r\n    //Обновление профиля в интерфейсе\r\n    profileName.textContent = userData.name;\r\n    profileJob.textContent = userData.about;\r\n    // Обновление аватара\r\n    if (userData.avatar) {\r\n      profileImage.style.backgroundImage = `url('${userData.avatar}')`;\r\n    }\r\n    // Отрисовываем карточки\r\n    renderCards(cards, userId);\r\n  })\r\n\r\n  .catch((err) => {\r\n    console.error(\"Ошибка обновления:\", err);\r\n  });\r\n\r\n// Открывает попап с увеличенным изображением\r\nfunction openView({ name, link }) {\r\n  imageView.src = link;\r\n  imageView.alt = name;\r\n  captionView.textContent = name;\r\n  openModal(imagePopup);\r\n};\r\n// Функция удаления карточки (теперь только открывает попап подтверждения)\r\nfunction deleteCard(cardElement, cardId) {\r\n  currentCardId = cardId; // Сохраняем ID карточки\r\n  currentCardElement = cardElement; // Сохраняем сам элемент\r\n  openModal(confirmPopup); // Открываем попап подтверждения\r\n};\r\n\r\n// Когда пользователь подтверждает удаление, \r\n// обработчик handleConfirm использует эти переменные \r\n// для выполнения удаления.\r\nconst handleConfirm = (evt) => {\r\n  evt.preventDefault();\r\n\r\n  // Блокируем кнопку\r\n  confirmButton.textContent = \"Удаление...\";\r\n  confirmButton.disabled = true;\r\n\r\n  // Отправляем запрос на сервер\r\n  removeCard(currentCardId)\r\n    .then(() => {\r\n      // Удаляем карточку из DOM после успешного ответа\r\n      currentCardElement.remove();\r\n      closeModal(confirmPopup);\r\n    })\r\n    .catch((error) => {\r\n      console.log(`Ошибка при удалении карточки: ${error}`);\r\n    })\r\n    .finally(() => {\r\n      confirmButton.textContent = \"Да\";\r\n      confirmButton.disabled = false;\r\n    });\r\n};\r\n\r\n// Вешаем обработчик на форму подтверждения\r\nconfirmPopup.addEventListener(\"submit\", handleConfirm);\r\n\r\n// Функция переключения лайка\r\nfunction likeCard(likeButton, cardId, isLiked, likeCounter) {\r\n  // вызов API для обновления лайка на сервере\r\n  toggleLike(cardId, isLiked)\r\n    .then((updatedCard) => {\r\n      // обновление состояния лайков\r\n      likeCounter.textContent = updatedCard.likes.length;\r\n      likeButton.classList.toggle(\"card__like-button_is-active\");\r\n    })\r\n    .catch((error) => console.log(`Не удалось поставить лайк: ${error}`));\r\n}\r\n\r\n//Объединяю в объект cardCallbacks для передачи в createCard\r\nconst cardCallbacks = {\r\n  onDeleteCard: deleteCard,\r\n  onLikeCard: likeCard,\r\n  onOpenView: openView,\r\n};\r\n\r\n// функция добавления карточки\r\nfunction handleAddCardFormSubmit(evt) {\r\n  evt.preventDefault(); //отменяет стандартную отправку формы.\r\n  // Получаем данные из формы\r\n  const name = placeInput.value;\r\n  const link = linkInput.value;\r\n\r\n  // Блокируем кнопку отправки\r\n  const submitButton = evt.target.querySelector(\".popup__button\");\r\n  submitButton.textContent = \"Сохранение...\";\r\n  submitButton.disabled = true;\r\n\r\n  // Отправляем данные на сервер\r\n  addNewCard(name, link)\r\n    .then((cardData) => {\r\n      // Создаем карточку с данными от сервера\r\n      const cardElement = createCard(cardData, cardCallbacks, userId);\r\n      placesContainer.prepend(cardElement);\r\n\r\n      // Очищаем форму и закрываем попап\r\n      newCardForm.reset();\r\n      closeModal(popupCardAdd);\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка при добавлении карточки:\", err);\r\n    })\r\n    .finally(() => {\r\n      // Разблокируем кнопку в любом случае\r\n      submitButton.textContent = \"Сохранить\";\r\n      submitButton.disabled = false;\r\n    });\r\n}\r\n\r\n//Обработчик отправки формы профиля\r\nfunction handleFormProfileSubmit(evt) {\r\n  evt.preventDefault(); //отменяет стандартную отправку формы.\r\n  //выберите элементы, куда должны быть вставлены начения полей\r\n  const name = nameInput.value;\r\n  const about = jobInput.value;\r\n\r\n  // Блокируем кнопку отправки\r\n  const submitButton = evt.target.querySelector(\".popup__button\");\r\n  const originalText = submitButton.textContent;\r\n  submitButton.textContent = \"Сохранение...\";\r\n  submitButton.disabled = true;\r\n\r\n  // Отправляем данные на сервер\r\n  updateUserInfo(name, about)\r\n    .then((userData) => {\r\n      // Обновляем интерфейс данными с сервера\r\n      profileName.textContent = userData.name;\r\n      profileJob.textContent = userData.about;\r\n      // profileAvatar.style.backgroundImage = `url(${userData.avatar})`;\r\n\r\n      closeModal(popupProfile);\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка при обновлении профиля:\", err);\r\n      // Можно добавить вывод ошибки для пользователя\r\n    })\r\n    .finally(() => {\r\n      // Восстанавливаем кнопку\r\n      submitButton.textContent = originalText;\r\n      submitButton.disabled = false;\r\n    });\r\n}\r\n\r\n// Обработчик отправки аватара\r\nfunction handleAvatarSubmit(evt) {\r\n  evt.preventDefault();\r\n\r\n  const submitButton = avatarForm.querySelector(\".popup__button\");\r\n  const originalText = submitButton.textContent;\r\n\r\n  // Блокируем кнопку\r\n  submitButton.textContent = \"Сохранение...\";\r\n  submitButton.disabled = true;\r\n\r\n  updateAvatar(avatarInput.value)\r\n    .then((userData) => {\r\n      // Обновляем аватар на странице\r\n      profileImage.style.backgroundImage = `url('${userData.avatar}')`;\r\n      closeModal(popupAvatar);\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"Ошибка обновления аватара:\", err);\r\n      avatarError.textContent = \"Не удалось обновить аватар\";\r\n    })\r\n    .finally(() => {\r\n      submitButton.textContent = originalText;\r\n      submitButton.disabled = false;\r\n    });\r\n}\r\n\r\n// Назначаем обработчик\r\navatarForm.addEventListener(\"submit\", handleAvatarSubmit);\r\n\r\n// Обработчик клика на аватар\r\nprofileImage.addEventListener(\"click\", () => {\r\n  avatarForm.reset();\r\n  clearValidation(avatarForm, validationConfig);\r\n  openModal(popupAvatar);\r\n});\r\n\r\n// обработчик открытия hредактирования профиля\r\nprofileEditButton.addEventListener(\"click\", () => {\r\n  // Заполняет форму текущими данными\r\n  nameInput.value = profileName.textContent;\r\n  jobInput.value = profileJob.textContent;\r\n  clearValidation(profileForm, validationConfig);\r\n  openModal(popupProfile);\r\n});\r\n\r\nnewCardButton.addEventListener(\"click\", () => {\r\n  newCardForm.reset(); // Очищает форму\r\n  openModal(popupCardAdd);\r\n  clearValidation(newCardForm, validationConfig);\r\n});\r\n\r\n// Назначаем обработчики закрытия\r\npopups.forEach((popup) => {\r\n  const closeButton = popup.querySelector(\".popup__close\");\r\n  closeButton.addEventListener(\"click\", () => {\r\n    closeModal(popup);\r\n  });\r\n  popup.addEventListener(\"click\", handleOverlayClick); // Закрытие по клику на оверлей\r\n\r\n  //плавное открытие с помощью класса анимации\r\n  //Класс анимации нужно повесить в DOM только один раз при загрузке страницы,\r\n  //либо добавить прямо в html для каждого popup(но в этом случае будет баг с мерцанием)\r\n  popup.classList.add(\"popup_is-animated\");\r\n});\r\n\r\n// Назначаем обработчики открытия изменения профиля\r\nprofileForm.addEventListener(\"submit\", handleFormProfileSubmit);\r\n\r\n// Назначаем обработчики добавления карточки\r\nnewCardForm.addEventListener(\"submit\", (evt) => {\r\n  handleAddCardFormSubmit(evt);\r\n});\r\n"],"names":["popupOpendClass","openModal","popupElement","classList","add","document","addEventListener","handleEscape","closeModal","remove","removeEventListener","evt","key","openedPopup","querySelector","concat","handleOverlayClick","target","currentTarget","cardTemplate","getElementById","content","createCard","dataObject","_ref","userId","onDeleteCard","onLikeCard","onOpenView","cardElement","cloneNode","cardImage","cardTitle","cardDeleteButton","likeButton","likeCounter","src","link","alt","name","textContent","likes","length","owner","_id","style","display","isLiked","some","like","toggle","currentIsLiked","contains","hideInputError","formElement","inputElement","validationConfig","errorElement","id","inputErrorClass","errorClass","toggleButtonState","inputList","buttonElement","validity","valid","hasInvalidInput","disabled","inactiveButtonClass","clearValidation","Array","from","querySelectorAll","inputSelector","forEach","setCustomValidity","submitButtonSelector","config","baseUrl","headers","authorization","checkResponse","res","ok","json","Promise","reject","status","placesContainer","profileEditButton","newCardButton","popups","popupProfile","popupCardAdd","imagePopup","imageView","captionView","profileForm","forms","newCardForm","nameInput","jobInput","popupAvatar","avatarForm","avatarInput","avatarError","profileImage","placeInput","linkInput","profileName","profileJob","confirmPopup","confirmButton","currentCardId","currentCardElement","formSelector","patternMismatch","dataset","errorMessage","showInputError","validationMessage","isValid","setEventListeners","enableValidation","all","fetch","then","_ref2","userData","cards","about","avatar","backgroundImage","card","cardCallbacks","append","renderCards","catch","err","console","error","cardId","preventDefault","method","log","finally","endpoint","toggleLike","updatedCard","_ref3","avatarUrl","submitButton","originalText","value","body","JSON","stringify","reset","popup","updateUserInfo","addNewCard","cardData","prepend","handleAddCardFormSubmit"],"sourceRoot":""}