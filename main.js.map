{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/scripts/cards.js","webpack://mesto-project-ff/./src/scripts/components/modal.js","webpack://mesto-project-ff/./src/scripts/components/card.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["export const initialCards = [\r\n    {\r\n     name: \"Лес\",\r\n     link: \"https://images.pexels.com/photos/2662116/pexels-photo-2662116.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\"\r\n    },\r\n    {\r\n     name: \"Озеро\",   \r\n     link: \"https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885_1280.jpg\"\r\n    },\r\n    {\r\n      name: \"Архыз\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\r\n    },\r\n    {\r\n      name: \"Челябинская область\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\r\n    },\r\n    {\r\n      name: \"Иваново\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\r\n    },\r\n    {\r\n      name: \"Камчатка\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\r\n    },\r\n    {\r\n      name: \"Холмогорский район\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\r\n    },\r\n    {\r\n      name: \"Байкал\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\r\n    },\r\n    {\r\n      name: \"Горный пейзаж\",\r\n      link: \"https://images.unsplash.com/photo-1454496522488-7a8e488e8606?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80\",\r\n    }\r\n];","// описаны функции для работы с модальными окнами: \r\nconst popupOpendClass = \"popup_is-opened\";\r\n\r\n// Универсальная функция открытия модального окна (попапа)\r\nexport function openModal(popupElement) {\r\n  popupElement.classList.add(popupOpendClass);\r\n  // Добавляем обработчик закрытия по Esc\r\n  document.addEventListener(\"keydown\", handleEscape);\r\n}\r\n\r\n// функция закрытия модального окна (попапа)\r\nexport function closeModal(popupElement) {\r\n  popupElement.classList.remove(popupOpendClass);\r\n  // Удаляем обработчики закрытия\r\n  document.removeEventListener(\"keydown\", handleEscape);\r\n}\r\n\r\n// функция-обработчик события нажатия Esc \r\nfunction handleEscape(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector(`.${popupOpendClass}`);\r\n    if (openedPopup) {\r\n      closeModal(openedPopup);\r\n    }\r\n  }\r\n}\r\n\r\n// Обработчик закрытия по клику на оверлей\r\nexport function handleOverlayClick(evt) {\r\n  if (evt.target === evt.currentTarget) {\r\n    closeModal(evt.currentTarget);\r\n  }\r\n}","// описаны функции для работы с карточками: функция создания карточки, функции-обработчики событий удаления и лайка карточки;\r\n// добавление карточек на страницу выполнено перебором массива с данными карточек с помощью цикла. используется метод .forEach или цикл for…of.\r\nconst cardTemplate = document.getElementById('card-template').content.querySelector('.card');\r\n\r\n//Функция удаления карточки\r\nexport function deleteCard(cardElement) {\r\n    cardElement.remove();\r\n};\r\n\r\n// Переключает состояние лайка\r\nexport function likeCard(likeButton) {\r\n  likeButton.classList.toggle('card__like-button_is-active'); \r\n};\r\n\r\n//Основная функция создания карточки\r\nexport function createCard(dataObject, {onDeleteCard, onLikeCard, onOpenView}) {\r\n    const cardElement = cardTemplate.cloneNode(true);  // Клонируем шаблон\r\n    // Получаем элементы карточки\r\n    const cardImage = cardElement.querySelector('.card__image');\r\n    const cardTitle = cardElement.querySelector('.card__title');\r\n    const cardDeleteButton = cardElement.querySelector('.card__delete-button');\r\n    const likeButton = cardElement.querySelector('.card__like-button');\r\n    // Заполняем данными\r\n    cardImage.src = dataObject.link;\r\n    cardImage.alt = dataObject.name;\r\n    cardTitle.textContent = dataObject.name;\r\n    // Назначаем обработчики событий\r\n    cardDeleteButton.addEventListener('click', () => {\r\n        onDeleteCard(cardElement);\r\n    });\r\n\r\n    likeButton.addEventListener('click', () => {\r\n        onLikeCard(likeButton);\r\n    });\r\n\r\n    cardImage.addEventListener(\"click\", () => {\r\n    onOpenView(dataObject);\r\n    });\r\n\r\n    return cardElement; \r\n}","// описана инициализация приложения и основная логика страницы:\r\n// поиск DOM-элементов на странице и навешивание на них обработчиков событий;\r\n// обработчики отправки форм, функция-обработчик события открытия модального окна для редактирования профиля;\r\n// функция открытия модального окна изображения карточки.\r\n// Также находится код, который отвечает за загрузку карточек и данных пользователя при открытии страницы.\r\n// вызов функций enableValidation и clearValidation должен находиться в файле index.js. \r\nimport './index.css'; // импорт главного файла стилей\r\nimport { initialCards } from './scripts/cards.js'; //картинки можно импортировать, вебпак добавит в переменные правильные пути\r\nimport {\r\n  openModal,\r\n  closeModal,\r\n  handleOverlayClick,\r\n} from \"./scripts/components/modal.js\";\r\nimport { createCard } from \"./scripts/components/card.js\";\r\nimport { \r\n  deleteCard,\r\n  likeCard\r\n } from './scripts/components/card.js';\r\n\r\n//Получение DOM-элементов\r\nconst placesContainer = document.querySelector('.places__list'); //Контейнер для карточек\r\n//Кнопки открытия модальных окон\r\nconst openButtonProfile = document.querySelector(\".profile__edit-button\"); // // Кнопка редактирования профиля\r\nconst openButtonCard = document.querySelector(\".profile__add-button\"); // // Кнопка добавления карточки\r\n//Элементы модальных окон (попапов)\r\nconst popups = document.querySelectorAll(\".popup\"); // Все попапы\r\nconst popupProfile = document.querySelector(\".popup_type_edit\"); // Попап редактирования профиля\r\nconst popupCardAdd = document.querySelector(\".popup_type_new-card\"); // Попап добавления карточки\r\nconst imagePopup = document.querySelector(\".popup_type_image\"); // Попап просмотра изображения\r\n//Формы и их элементы\r\nconst profileForm = document.forms[\"edit-profile\"]; // Форма редактирования профиля\r\nconst newCardForm = document.forms[\"new-place\"]; // Форма добавления карточки\r\n// Поля формы редактирования профиля\r\nconst nameInput = popupProfile.querySelector(\".popup__input_type_name\"); \r\nconst jobInput = popupProfile.querySelector(\".popup__input_type_description\");\r\n// Поля формы добавления карточки\r\nconst placeInput = newCardForm.querySelector(\".popup__input_type_card-name\");\r\nconst linkInput = newCardForm.querySelector(\".popup__input_type_url\");\r\n//Элементы профиля\r\nconst profileName = document.querySelector(\".profile__title\");\r\nconst profileJob = document.querySelector(\".profile__description\");\r\n//Элементы попапа с изображением\r\nconst imageView = imagePopup.querySelector(\".popup__image\"); // Увеличенное изображение\r\nconst captionView = imagePopup.querySelector(\".popup__caption\"); // Подпись к изображению\r\n\r\n// включение валидации вызовом enableValidation\r\nconst validationConfig = {\r\n  formSelector: '.popup__form',\r\n  inputSelector: '.popup__input',\r\n  submitButtonSelector: '.popup__button',\r\n  inactiveButtonClass: 'popup__button_disabled',\r\n  inputErrorClass: 'popup__input_type_error',\r\n  errorClass: 'popup__error_visible'\r\n}\r\n// все настройки передаются при вызове\r\nenableValidation(validationConfig);\r\n\r\n// // вызов функций clearValidation\r\n// clearValidation();\r\n\r\n\r\n// Открывает попап с увеличенным изображением\r\nfunction openView({ name, link }) {\r\n  imageView.src = link;\r\n  imageView.alt = name;\r\n  captionView.textContent = name;\r\n  openModal(imagePopup);\r\n};\r\n\r\n//Объединяю в объект cardCallbacks для передачи в createCard\r\nconst cardCallbacks = {\r\n  onDeleteCard: deleteCard,\r\n  onLikeCard: likeCard,\r\n  onOpenView: openView,\r\n};\r\n\r\n// функция добавления карточки\r\nfunction handleAddCardFormSubmit(evt) {\r\n  evt.preventDefault();\r\n  // Получаем данные из формы\r\n  const name = placeInput.value;\r\n  const link = linkInput.value;\r\n\r\n  // Создаем карточку\r\n  const cardElement = createCard({ name, link }, cardCallbacks);\r\n  // Добавляет новую карточку в начало списка\r\n  placesContainer.prepend(cardElement); \r\n\r\n  // Очищаем форму и закрываем попап\r\n  closeModal(popupCardAdd);\r\n};\r\n\r\nfunction handleFormProfileSubmit(evt) {\r\n  evt.preventDefault(); //отменяет стандартную отправку формы.\r\n  \r\n  profileName.textContent = nameInput.value; // Обновляем имя профиля\r\n  profileJob.textContent = jobInput.value; // Обновляем описание профиля\r\n  closeModal(popupProfile);\r\n};\r\n\r\n// Назначаем обработчики открытия\r\nopenButtonProfile.addEventListener(\"click\", () => {\r\n  // Заполняет форму текущими данными\r\n  nameInput.value = profileName.textContent;\r\n  jobInput.value = profileJob.textContent;\r\n  openModal(popupProfile);\r\n});\r\n\r\nopenButtonCard.addEventListener(\"click\", () => {\r\n  newCardForm.reset(); // Очищает форму\r\n  openModal(popupCardAdd);\r\n});\r\n\r\n// Назначаем обработчики закрытия \r\npopups.forEach((popup) => {\r\n  const closeButton = popup.querySelector(\".popup__close\"); \r\n  closeButton.addEventListener(\"click\", () => {\r\n    closeModal(popup);\r\n  });\r\n  popup.addEventListener(\"click\", handleOverlayClick); // Закрытие по клику на оверлей\r\n\r\n//плавное открытие с помощью класса анимации\r\n//Класс анимации нужно повесить в DOM только один раз при загрузке страницы,\r\n//либо добавить прямо в html для каждого popup(но в этом случае будет баг с мерцанием)\r\n  popup.classList.add('popup_is-animated');\r\n});\r\n\r\n// Назначаем обработчики открытия изменения профиля\r\nprofileForm.addEventListener(\"submit\", handleFormProfileSubmit);\r\n\r\n// Назначаем обработчики добавления карточки\r\nnewCardForm.addEventListener(\"submit\", (evt) => {\r\n  handleAddCardFormSubmit(evt);\r\n});\r\n\r\n// @todo: Вывести карточки на страницу\r\n// заменила функцию на прямое добавление\r\n// function addCardToContainer(containerElement, cardElement) {\r\n//     containerElement.append(cardElement);\r\n// }\r\n// addCardToContainer(placesContainer, cardNode);\r\n\r\n initialCards.forEach((cardObj) => {\r\n    const cardNode = createCard(cardObj, cardCallbacks);\r\n    placesContainer.append(cardNode)\r\n })\r\n\r\n\r\n"],"names":["popupOpendClass","openModal","popupElement","classList","add","document","addEventListener","handleEscape","closeModal","remove","removeEventListener","evt","key","openedPopup","querySelector","concat","handleOverlayClick","target","currentTarget","cardTemplate","getElementById","content","createCard","dataObject","_ref","onDeleteCard","onLikeCard","onOpenView","cardElement","cloneNode","cardImage","cardTitle","cardDeleteButton","likeButton","src","link","alt","name","textContent","placesContainer","openButtonProfile","openButtonCard","popups","querySelectorAll","popupProfile","popupCardAdd","imagePopup","profileForm","forms","newCardForm","nameInput","jobInput","placeInput","linkInput","profileName","profileJob","imageView","captionView","enableValidation","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorClass","cardCallbacks","toggle","value","reset","forEach","popup","preventDefault","prepend","handleAddCardFormSubmit","cardObj","cardNode","append"],"sourceRoot":""}